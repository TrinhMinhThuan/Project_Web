<div class="container d-flex flex-column">
    <form id="searchForm" method="GET">
        <div class="row gap-3">
        <input
            type="text"
            class="col-md-8 col-12 col-sm-12 form-control"
            placeholder="Nhập ID hoặc Tên người dùng"
            name="keyword"
            value= "{{keyword}}"
        />
        <button type="submit" class="col btn btn-success"><i class="fa-solid fa-magnifying-glass"></i> Tra cứu</button>
        </div>
    </form>

    <div class="query-result mt-5">
        <h5 class="text-center mb-3 fw-bold">KẾT QUẢ TRA CỨU</h5>

        <table class="table">
            <thead>
                <tr class="text-center">
                    <th scope="col">#ID</th>
                    <th scope="col">Tên người dùng</th>
                    <th scope="col">Email</th>
                    <th scope="col">Loại tài khoản</th>
                    <th scope="col">Xóa</th>
                    <th scope="col">Chỉnh sửa</th>
                </tr>
            </thead>

            <tbody>
                {{#each users}}
                    <tr class="text-center" id = {{this.UserID}}>
                        <th scope="row">{{this.UserID}}</th>
                        <td>{{#if this.Username}} {{this.Username}} {{else}} {{this.GoogleName}} {{/if}}</td>
                        <td><a href="mailto:{{this.Email}}">{{this.Email}}</a></td>

                        <td>{{#if this.GoogleID}} Google {{else}} Thường {{/if}}</td>
                        <td class="text-center">
                            <button class="btn btn-delete btn-danger" data-user-id="{{this.UserID}}">
                                <i class="fas fa-trash"></i> 
                            </button></td>
                        <td class="text-center">
                            <button class="btn btn-edit btn-primary" data-user-id="{{this.UserID}}">
                                <i class="fas fa-edit"></i> 
                            </button>
                        </td>
                    </tr>   
                {{else}}
                <td colspan="6" class="text-center">Không Tìm Thấy Người Dùng.</td>
                {{/each}}
            </tbody>
        </table>
    </div>


    <div class="d-flex justify-content-center">
        {{#if pages}}
            <button class="btn-prevStart btn btn-light mr-2"><i class="fa fa-angle-double-left"></i></button>
            <button class="btn-prev btn btn-light mr-2"><i class="fas fa-chevron-left"></i></button>

            <select id = "pageSelect" class="col-2 align-self-center text-center paging form-select ">
                {{#each pages}}
                    <option value="{{this}}">Trang {{this}}</option>
                {{/each}}
            </select>

            <button  class="btn-next btn btn-light ml-2"><i class="fas fa-chevron-right"></i></button>
            <button class="btn-nextEnd btn btn-light ml-2"><i class="fa fa-angle-double-right"></i></button>
        {{/if}}
    </div>
</div>


<script>
    var currentPage = 1;
    function updateCurrentPage() {
        currentPage = document.getElementById("pageSelect").value;
    }
    
    const selection = document.querySelector(".paging");
    selection?.addEventListener("change", (e) => {
        const url = new URL(window.location.href);
        const query = new URLSearchParams(window.location.search);
        query.set("page", e.target.value);
        url.search = query;
        location.assign(url.href);
    });

    const query = new URLSearchParams(window.location.search);
    if (selection) 
    {
        selection.value = query.get("page") || 1;
    }

    document.querySelectorAll('.btn-prevStart').forEach(button => {
        button.addEventListener('click', function(e) {
            updateCurrentPage();

            if(currentPage == 1) {
                return;
            }

            const url = new URL(window.location.href);
            const query = new URLSearchParams(window.location.search);
            query.set("page", 1);
            url.search = query;
            location.assign(url.href);
        })
    });

    document.querySelectorAll('.btn-prev').forEach(button => {
        button.addEventListener('click', function(e) {
            updateCurrentPage();
        
            if (currentPage == 1)
            {
                return;
            }

            const url = new URL(window.location.href);
            const query = new URLSearchParams(window.location.search);
            query.set("page", currentPage - 1);
            url.search = query;
            location.assign(url.href);
        })
    });

    document.querySelectorAll('.btn-next').forEach(button => {
        button.addEventListener('click', function(e) {
            updateCurrentPage();
    
            const max = {{pages.length}};
            
            if (currentPage == max) 
            {
                return;
            }

            const url = new URL(window.location.href);
            const query = new URLSearchParams(window.location.search);
            query.set("page", parseInt(currentPage,10) + 1);
            url.search = query;
            location.assign(url.href);
        })
    });

    document.querySelectorAll('.btn-nextEnd').forEach(button => {
        button.addEventListener('click', function(e) {
            updateCurrentPage();
            
            const max = {{pages.length}};
            if(currentPage == max) {
                return;
            }

            const url = new URL(window.location.href);
            const query = new URLSearchParams(window.location.search);
            query.set("page", max);
            url.search = query;
            location.assign(url.href);
        })
    });

    // Delete vs AJAX
    document.querySelectorAll('.btn-delete').forEach(button => {
        button.addEventListener('click', function() {
            var userConfirmed = confirm("Bạn có chắc chắn muốn xóa tài khoản này?");
            if(!userConfirmed) return;

            const userID = this.getAttribute('data-user-id');
            const deleteUrl = `/accounts/delete/${userID}`;
            
            const xhr = new XMLHttpRequest();
            xhr.open('DELETE', deleteUrl, true);
            
            xhr.onreadystatechange = function() {
                
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        updateUI(userID);
                        console.log('Dữ liệu đã được xóa thành công!');
                    } else {
                        console.error('Lỗi xóa dữ liệu:', xhr.statusText);
                    }
                }
            };

            xhr.send();
        });
    });

    function updateUI(userID) {
        const rowToRemove = document.getElementById(userID);
        
        if (rowToRemove) {
            rowToRemove.remove();
        } else {
            console.error('Không tìm thấy hàng để loại bỏ.');
        }
    }

    // Edit
    document.querySelectorAll('.btn-edit').forEach(button => {
        button.addEventListener('click', function() {
            const userID = this.getAttribute('data-user-id');
            window.location.href = `/accounts/edit/${userID}`;
        });
    }); 
</script> 
