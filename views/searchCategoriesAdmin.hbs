<div class="container d-flex flex-column">
  <form id="searchForm"  action="/admin" method="GET">
    <div class="row gap-3">
      <input
        type="text"
        class="col-7 form-control"
        placeholder="Tìm kiếm bằng tên thể loại"
        name="keyCategoryName"
        value= "{{ValueName}}"
      />
      <button type="submit" class="col btn btn-success">Tra cứu</button>
    </div>
  </from>

  <div class="query-result mt-5">
    <h5 class="text-center mb-3">KẾT QUẢ TRA CỨU</h5>
    <table class="table">
      <thead>
        <tr>
          <th scope="col">#ID</th>
          <th scope="col">Tên thể loại</th>
          <th scope="col">Số sản phẩm</th>
          <th scope="col">Xóa</th>
          <th scope="col">Chỉnh sửa</th>
        </tr>
      </thead>
      <tbody>
         {{#each _Categories}}
          <tr id = {{this.CategoryID}}>
            <th scope="row" >{{this.CategoryID}}</th>
            <td>{{this.CategoryName}}</td>
            <td>{{this.CategoryQuantity}}</td>
            <td>
              <button class="btn-delete" data-category-id="{{this.CategoryID}}">
                <i class="fas fa-trash"></i> 
              </button></td>
             <td>
              <button class="btn-edit" data-category-id="{{this.CategoryID}}">
                <i class="fas fa-edit"></i> 
              </button>
            </td>
          </tr>
        {{else}}
          <td colspan="6" class="text-center">Không Tìm Thấy Sách Theo Yêu Cầu🥲</td>
        {{/each}}
      </tbody>
    </table>
  </div>
  <div class="d-flex justify-content-center">
    {{#if pages}}
    <select class="col-2 align-self-center paging form-select">
      {{#each pages}}
      <option value="{{this}}">Page {{this}}</option>
      {{/each}}
    </select>
    {{/if}}
  </div>
</div>
<script>
// Update Page
const selection = document.querySelector(".paging");
selection?.addEventListener("change", (e) => {
  const url = new URL(window.location.href);
  const query = new URLSearchParams(window.location.search);
  query.set("page", e.target.value);
  url.search = query;
  location.assign(url.href);
});
const query = new URLSearchParams(window.location.search);
if (selection) selection.value = query.get("page") || 1;

// Delete vs ajax
document.querySelectorAll('.btn-delete').forEach(button => {
  button.addEventListener('click', function() {
    event.preventDefault();
    const categoryId = this.getAttribute('data-category-id');
    const deleteUrl = `/admin/categories/delete/${categoryId}`;
    // Sử dụng AJAX để gửi yêu cầu DELETE
    const xhr = new XMLHttpRequest();
    xhr.open('DELETE', deleteUrl, true);

    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        console.log(xhr.status);
        if (xhr.status === 200) {
          // Xử lý thành công
          updateUI(categoryId);
          console.log('Dữ liệu đã được xóa thành công!');
        } else {
          // Xử lý lỗi
          console.error('Lỗi xóa dữ liệu:', xhr.statusText);
        }
      }
    };
    xhr.send();
  });
});
//Update giao diện
function updateUI(categoryId) {
    // Lấy tham chiếu đến phần tử trực tiếp bằng id
    const rowToRemove = document.getElementById(categoryId);
    // Kiểm tra xem có phần tử để loại bỏ không
    if (rowToRemove) {
      // Loại bỏ hàng từ DOM
      rowToRemove.remove();
    } else {
      console.error('Không tìm thấy hàng để loại bỏ.');
    }
}


// Edit
document.querySelectorAll('.btn-edit').forEach(button => {
  button.addEventListener('click', function() {
    event.preventDefault();
    const categoryId = this.getAttribute('data-category-id');
    window.location.href = `/admin/categories/edit/${categoryId}`;
  });
});
</script>
